// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

generator postgis {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  postgresSqlSchema = "public"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [postgis(schema: "public")]
}

model User {
  id                String             @id @default(cuid())
  name              String
  email             String             @unique
  password          String?
  role              String // admin, project_manager, engineer, inspector, contractor, councilor
  department        String // engineering, administration, quality_control, finance, external
  status            String             @default("active")
  phone             String?
  notificationPrefs NotificationPrefs?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  projects          ProjectUser[]
  activities        Activity[]
  uploads           Upload[]
  feedback          Feedback[]
  approvals         Approval[]
  notifications     Notification[]
  ProjectPhoto      ProjectPhoto[]
  ProjectVideo      ProjectVideo[]
  assignments      Assignment[]
}

model NotificationPrefs {
  id               String   @id @default(cuid())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailEnabled     Boolean  @default(true)
  smsEnabled       Boolean  @default(false)
  inAppEnabled     Boolean  @default(true)
  milestoneUpdates Boolean  @default(true)
  budgetAlerts     Boolean  @default(true)
  approvalRequests Boolean  @default(true)
  systemUpdates    Boolean  @default(false)
  digestFrequency  String   @default("daily") // realtime, hourly, daily, weekly
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Ward {
  id          String    @id @default(cuid())
  name        String
  number      Int
  description String?
  projects    Project[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Project {
  id                 String           @id @default(cuid())
  name               String
  tenderId           String           @unique
  description        String?
  status             String // planning, tendering, in_progress, completed
  type               String // new, repair, widening, resurfacing
  startDate          DateTime?
  expectedCompletion DateTime?
  actualCompletion   DateTime?
  budget             Float
  spent              Float            @default(0)
  completion         Int              @default(0)
  location           Location? // { lat: number, lng: number }
  wardId             String
  ward               Ward             @relation(fields: [wardId], references: [id])
  milestones         Milestone[]
  users              ProjectUser[]
  activities         Activity[]
  uploads            Upload[]
  feedback           Feedback[]
  approvals          Approval[]
  reports            Report[]
  versions           ProjectVersion[]
  roadSegments       RoadSegment[]
  assignments       Assignment[]
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  ProjectPhoto       ProjectPhoto[]
  ProjectVideo       ProjectVideo[]
}

model ProjectVersion {
  id           String   @id @default(cuid())
  projectId    String
  project      Project  @relation(fields: [projectId], references: [id])
  version      Int
  data         Json // Snapshot of project data
  changedBy    String
  changeReason String?
  createdAt    DateTime @default(now())
}

model Location {
  id        String  @id @default(cuid())
  lat       Float
  lng       Float
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String  @unique
}

model ProjectUser {
  id        String   @id @default(cuid())
  role      String // project_manager, engineer, inspector, contractor, councilor
  projectId String
  userId    String
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([projectId, userId])
}

model Milestone {
  id           String          @id @default(cuid())
  name         String
  description  String?
  status       String // pending, in_progress, completed
  date         DateTime?
  projectId    String
  project      Project         @relation(fields: [projectId], references: [id])
  checklist    ChecklistItem[]
  uploads      Upload[]
  activities   Activity[]
  approvals    Approval[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  ProjectPhoto ProjectPhoto[]
  ProjectVideo ProjectVideo[]
}

model ChecklistItem {
  id          String    @id @default(cuid())
  name        String
  checked     Boolean   @default(false)
  amount      Float     @default(0) // Amount to be used for this checklist item
  milestoneId String
  milestone   Milestone @relation(fields: [milestoneId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Upload {
  id          String     @id @default(cuid())
  type        String // photo, video, document
  name        String
  url         String
  size        Int
  mimeType    String
  description String?
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id])
  milestoneId String?
  milestone   Milestone? @relation(fields: [milestoneId], references: [id])
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Activity {
  id          String     @id @default(cuid())
  action      String
  details     String?
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id])
  milestoneId String?
  milestone   Milestone? @relation(fields: [milestoneId], references: [id])
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  createdAt   DateTime   @default(now())
}

model Feedback {
  id          String    @id @default(cuid())
  subject     String
  message     String
  priority    String    @default("medium") // low, medium, high, urgent
  status      String    @default("pending") // pending, in-review, resolved, rejected
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  response    String?
  respondedBy String?
  respondedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Approval {
  id          String     @id @default(cuid())
  type        String // milestone, budget, timeline, document
  status      String     @default("pending") // pending, approved, rejected
  details     String?
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id])
  milestoneId String?
  milestone   Milestone? @relation(fields: [milestoneId], references: [id])
  requestedBy String
  requestedAt DateTime   @default(now())
  approvedBy  String?
  approvedAt  DateTime?
  user        User       @relation(fields: [requestedBy], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Report {
  id          String   @id @default(cuid())
  name        String
  type        String // projects, budget, completion, ward
  format      String // pdf, excel, csv
  filters     Json?
  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id])
  generatedBy String
  url         String?
  createdAt   DateTime @default(now())
}

model ReportSchedule {
  id         String    @id @default(cuid())
  name       String
  reportType String // projects, budget, completion, ward
  schedule   String // daily, weekly, monthly, quarterly
  day        String? // day of week or month
  time       String
  recipients String[]
  formats    String[] // pdf, excel, csv
  filters    Json?
  lastRun    DateTime?
  nextRun    DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  type      String // milestone, approval, comment, system
  title     String
  message   String
  read      Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  projectId String?
  createdAt DateTime @default(now())
}

model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  updatedBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BackupLog {
  id        String   @id @default(cuid())
  type      String // database, files, config
  status    String // success, failed
  url       String?
  size      Int?
  duration  Int? // in seconds
  error     String?
  createdAt DateTime @default(now())
}

model ProjectPhoto {
  id          String     @id @default(cuid())
  url         String
  fileName    String
  description String?
  fileSize    Int
  fileType    String
  milestoneId String?
  milestone   Milestone? @relation(fields: [milestoneId], references: [id])
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id])
  uploadedBy  String
  user        User       @relation(fields: [uploadedBy], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  lat         Float? // Latitude of where the photo was taken
  lng         Float? // Longitude of where the photo was taken
  checklistItemId String?
}

model ProjectVideo {
  id          String     @id @default(cuid())
  url         String
  fileName    String
  description String?
  fileSize    Int
  fileType    String
  milestoneId String?
  milestone   Milestone? @relation(fields: [milestoneId], references: [id])
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id])
  uploadedBy  String
  user        User       @relation(fields: [uploadedBy], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  lat         Float? // Latitude of where the video was taken
  lng         Float? // Longitude of where the video was taken
  checklistItemId String?
}



model RoadSegment {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(255)
  geometry     String    @db.Text
  startLat     Decimal  @map("start_lat") @db.Decimal(10, 8)
  startLng     Decimal  @map("start_lng") @db.Decimal(11, 8)
  endLat       Decimal  @map("end_lat") @db.Decimal(10, 8)
  endLng       Decimal  @map("end_lng") @db.Decimal(11, 8)
  lengthMeters Decimal  @map("length_meters") @db.Decimal(10, 2)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  assignments  Assignment[]
  project      Project?    @relation(fields: [projectId], references: [id])
  projectId    String?

  @@map("road_segments")
}

model Assignment {
  id             Int         @id @default(autoincrement())
  roadSegmentId  Int         @map("road_segment_id")
  userId         String      @map("user_id")
  startDate      DateTime    @map("start_date") @db.Date
  endDate        DateTime    @map("end_date") @db.Date
  status         String      @default("active") @db.VarChar(50)
  notes          String?     @db.Text
  projectId      String      @map("project_id")
  createdAt      DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  roadSegment    RoadSegment @relation(fields: [roadSegmentId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  project       Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("assignments")
}
